"*******************************************************************************
" NOTE:
"<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
" [快捷键索引]
"F1                         vim help
"F2                         
"F3                         NERDTree窗口开关
"F4                         
"F5                         Quickly Run (nmap)
"F6                         
"F7                         
"F8                         
"F9                         
"Ctr+F9                     
"F10
"F12                        粘贴模式开关
"Ctrl+n                     ctags生成.tags文件 (nmap)
"Ctrl+m                     打开taglist窗口 (nmap)
"Ctrl+b                     tagbar (nmap)
"Ctrl+l                     IndentLine (nmap)
"Ctrl+e                     phpcs error window toggle (nmap)
"Ctrl+z                     显示行尾空格
">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>



"<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
"*******************************************************************************
"-------------------------------------------------------------------------------
" [Basic Settings]
set nocompatible    "去掉讨厌的有关vi一致性模式，避免以前版本的一些bug和局限
set cmdheight=1     "命令行（在状态行下）的高度，设置为1 
set helplang=cn     "设置中文帮助文档，若需要英文则改为helplang=en
"set langmenu=zh_CN.UTF-8
source ~/.vim/bundles_ployo.vim

"-------------------------------------------------------------------------------
" [Encoding dectection]
set encoding=utf-8
set fileencodings=utf-8,gb2312,gb18030,gbk,ucs-bom,cp936,latin1
set termencoding=utf-8,gb18030,gb2312,gbk

"-------------------------------------------------------------------------------
" [Enable filetype dectection and ft specific plugin/indent]
filetype plugin indent on



"*******************************************************************************
"-------------------------------------------------------------------------------
" [按键映射说明]
"Command    Normal      Visual      Operator Pending    Inder Only  Command Line
"           常规模式    可视化模式  运算符模式          插入模式    命令行模式
":map       y           y           y
":nmap      y
":vmap                  y
":omap                              y
":map!                                                  y           y
":imap                                                  y
":cmap                                                              y
":map {lhs} {rhs}       其含义是，在:map作用的模式中把键系列 {lhs} 映射为{rhs}，{rhs}可进行映射扫描，也就是可递归映射。
"{rhs} 之前可能显示一个特殊字符:& 表示仅脚本的局部映射可以被重映射;@表示缓冲区的局部映射
"键表：
"<k0> - <k9>        小键盘 0 到 9
"<S-...>            Shift＋键
"<C-...>            Control＋键
"<M-...>            Alt＋键 或 meta＋键
"<A-...>            同 <M-...>
"<Esc>              Escape 键
"<Up>               光标上移键
"<Space>            插入空格
"<Tab>              插入Tab
"<CR>               等于<Enter>
"特殊参数：<buffer>,<silent>,<special>,<expr>,<unique>,<Leader>和mapleader变量,<LocalLeader>和maplocalleader变量

"-------------------------------------------------------------------------------
" [按键映射]
"imap <c-k> <up>
"imap <c-j> <down>
"imap <c-h> <left>
"imap <c-l> <right>
"imap <bs> <delete>
set pastetoggle=<f12>


"*******************************************************************************
"-------------------------------------------------------------------------------
" [Vim UI]
"------------------------------>>> 编辑基础设置
set history=1000                    "历史记录1000条
"set viminfo                         "记录下vim的操作行为
set backspace=indent,eol,start      "More powerful backspacing
"set whichwrap=b,s,<,>,[,]           "光标从行首和行末时可以跳到另一行去 
"set whichwrap+=<,>,h,l              "允许backspace和光标键跨越行边界(不建议)
set confirm                         "如果有操作需要确认，显示对话框。可用于:q、:qa 和 :w 命令 (后者用于超越只读的设定)，和 其他会以类似方式失败的命令
"set report=0                        "always report number of lines changed
set number                          "show line numbers
"set relativenumber                  "每行前显示相对于光标所在的行的行号
set showmatch                       "设置匹配模式，显示匹配的括号
"set title                           "show file in titlebar
"set hidden                          "允许在有未保存的修改时切换缓冲区，此时的修改由 vim负责保存
"set previewwindow                   "标识预览窗口

"------------------------------>>> color scheme
set background=dark
"set t_Co=256                    "Explicitly tell vim that the terminal has 256 colors
"colorscheme default             "设置配色方案
"colorscheme contrastneed
"colorscheme github
"colorscheme ron
"colorscheme desert
"colorscheme solarized

"------------------------------>>> highlight current line
au WinLeave * set nocursorline nocursorcolumn   "离开某窗口前
au WinEnter * set cursorline cursorcolumn       "进入别的窗口后。不包括 Vim 启动时的第一个窗口
set cursorline cursorcolumn                     "Vim启动时,高亮光标所在行所在列
"highlight CursorLine   cterm=NONE ctermbg=NONE ctermfg=green guibg=NONE guifg=NONE
"highlight CursorColumn cterm=NONE ctermbg=darkblue ctermfg=green guibg=NONE guifg=NONE

"------------------------------>>> 让vim记忆上次编辑编辑的位置
"当~/.viminfo文件出现权限问题时会失效
"删除文件~/.viminfo，然后重新打开vim(注意要以当前用户打开),vim会自动重建该文件
autocmd BufReadPost *
	\ if line("'\"")>0&&line("'\"")<=line("$") |
	\ exe "normal g'\"" |
	\ endif

"------------------------------>>> 搜索
"set incsearch       "逐步搜索模式，对当前键入的字符进行搜索而不必等待键入完成。输入搜索命令时，显示目前输入的模式的匹配位置。匹配的字符串被高亮
set hlsearch        "高亮搜索结果，所有结果都高亮显示，而不是只显示一个匹配
"set highlight       "conflict with highlight current line
"set ignorecase      "索模式里忽略大小写
"set smartcase       "如果搜索模式包含大写字符，不使用 'ignorecase' 选项。只有在输入搜索模式并且打开 'ignorecase' 选项时才会使用

"------------------------------>>> 折叠设置
"折叠模式：
"manual    （不常用）默认折叠方法，关闭vim折叠会丢失。如果想保持折叠信息，可运行:mkview 命令，重启后用 :loadview 命令回复。该命令生成的缓存文件位于~/.vim/view 文件夹中。移动或重命名文件，折叠信息依然会丢失。
"indent    （常用）缩进折叠方法，相同的缩进中代码会被折叠。
"syntax    （不常用）语法高亮折叠，在c/c++中会折叠花括号部分，其它格式代码中有的不能自动折叠。
"marker    （常用）标记折叠方法。关闭vim折叠信息不会丢失，而且易用控制和标注。
set nofoldenable
"set foldlevelstart=99      "打开文件是默认不折叠代码
"set foldmethod=indent
"set foldcolumn=5           "折叠指示标记

"------------------------------>>> 状态行、命令行设置
set ruler                           "标尺，用于显示光标位置的行号和列号，逗号分隔。每个窗口都有自己的标尺。如果窗口有状态行，标尺在那里显示。否则，它显示在屏幕的最后一行上
set laststatus=2                    "总显示最后一个窗口的状态行；设为1则窗口数多于一个的时候显示最后一个窗口的状态行；2总是显示状态行；0永远不会有状态行
set statusline=%t%m%r%h%w%<\ [FORMAT=%{&ff}]\ [TYPE=%Y]\ [LEN=%L]\ [POS=%l,%v][%p%%]\ [ASCII=\%03.3b]
"set statusline=[%F]%y%r%m%*%=[Line:%l/%L,Column:%c][%p%%]   "状态栏的显示格式
"set statusline=%F%m%r%h%w%<\ [FORMAT=%{&ff}]\ [TYPE=%Y]\ [POS=%l,%v][%p%%]\ %{strftime(\"%d/%m/%y\ -\ %H:%M\")}   "状态行显示的内容
"set statusline=%F%m%r%h%w\ [FORMAT=%{&ff}]\ [TYPE=%Y]\ [ASCII=\%03.3b]\ [HEX=\%02.2B]\ [POS=%04l,%04v][%p%%]\ [LEN=%L] 
set matchtime=2                     "show matching bracket for 0.2 seconds
set matchpairs+=<:>                 "specially for html
set showcmd                         "命令行显示输入的命令
set showmode                        "命令行显示vim当前模式

"------------------------------>>> 自动加载和自动回写
"设置当正在编辑的文件被外部的其它程序所修改后自动在Vim加载
"if exists("&autoread")
"    set autoread
"endif
"自动把内容写回文件: 如果文件被修改过，在每个:next、:rewind、:last、:first、:previous、:stop、:suspend、:tag、:!、:make、CTRL-] 和 CTRL-^命令时进行；
"用 :buffer、CTRL-O、CTRL-I、'{A-Z0-9} 或 `{A-Z0-9} 命令转到别的文件时亦然。
set autowrite       "有改动时自动写回文件

"------------------------------>>> 移动设置
set scrolloff=0                     "光标上下两侧最少保留的屏幕行数。这使你工作时总有一些可见的上下文

"------------------------------>>> 文件备份
"默认情况下使用Vim编程，在修改文件后系统会自动生成一个带~的备份文件，如若不需要文件和备份，可以复位
"set nobackup
"set nowritebackup

"------------------------------>>> 鼠标设置
"   n --> 普通模式
"   v --> 可视模式
"   i --> 插入模式
"   c --> 命令行模式
"   h --> 编辑帮助文件时,所有前面的模式
"   a --> 所有前面的模式
"   r --> hit-enter 和 more-prompt 提示时
"if exists("&mouse")
"    set mouse=a
"使用鼠标这样设置后，不能用鼠标右键的”复制"了，解决方法，在复制之前，先按住Shift键
"endif

"------------------------------>>> 换行与折行
"set linebreak               "整词换行
set textwidth=0              "插入文本的最大宽度。更长的行会在空白之后截断，以达到此宽度。值为0关闭此项功能
set wrap                    "设置自动折行
"set nowrap                  "设置不自动折行

"------------------------------>>> Default Indentation
set expandtab                       "使用space代替tab
set autoindent                      "vim使用自动对起，也就是把当前行的对起格式应用到下一行
set smartindent                     "据上面的对起格式，智能的选择对起方式，对于类似C语言
set cindent                         "Vim可以很好的识别出C和Java等结构化程序设计语言，并且能用C语言的缩进格式来处理程序的缩进结构
set tabstop=4                       "设置制表符(tab键)的宽度
set softtabstop=4                   "设定编辑模式下 tab 的视在宽度，这不改变 tabstop，但让编辑的时候tab 看起来是指定的宽度
set shiftwidth=4                    "(自动) 缩进使用的4个空格，用于 'cindent', '>>', '<<' 等
set smarttab                        "解决 shiftwidth 和 tabstop不等时的麻烦。在行首输入 tab 时插入宽度为 shiftwidth 的空白，在其他地方按tabstop 和 softtabstop 处理

autocmd FileType php setlocal tabstop=4 shiftwidth=4 softtabstop=4 "textwidth=120
autocmd FileType ruby setlocal tabstop=2 shiftwidth=2 softtabstop=2 "textwidth=120
autocmd FileType coffee,javascript setlocal tabstop=4 shiftwidth=4 softtabstop=4 "textwidth=120
autocmd FileType python setlocal tabstop=4 shiftwidth=4 softtabstop=4 "textwidth=120
autocmd FileType html,htmldjango,xhtml,haml setlocal tabstop=4 shiftwidth=4 softtabstop=4 "textwidth=0
autocmd FileType sass,scss,css setlocal tabstop=4 shiftwidth=4 softtabstop=4 "textwidth=120

"-------------------------------------------------------------------------------
" [Enable syntax hightlight and completion]
if has("syntax")
    syntax on           "语法高亮
endif

"-------------------------------------------------------------------------------
" [括号自动补全]
":inoremap ( ()<ESC>i
":inoremap ) <c-r>=ClosePair(')')<CR>
":inoremap { {<CR>}<ESC>O
":inoremap } <c-r>=ClosePair('}')<CR>
":inoremap [ []<ESC>i
":inoremap ] <c-r>=ClosePair(']')<CR>
":inoremap " ""<ESC>i
":inoremap ' ''<ESC>i
"function! ClosePair(char)
"   if getline('.')[col('.') - 1] == a:char
"       return "\<Right>"
"   else
"       return a:char
"   endif
"endfunction



"*******************************************************************************
"-------------------------------------------------------------------------------
" [C/C++]
"------------------------------>>> 编译调试设置
"C,C++的调试(适用于在Vim中编译调试单个文件)
"map <F7> :call Rungdb()<CR><CR><CR>
"func! Rungdb()
"	exec "w"
"   exec "!gcc % -g -o %<"
"   exec "!gdb %<"
"endfunc

"------------------------------>>> 文件类型兼容设置
"autocmd BufRead,BufNewFile *.c set filetype=ccpp
"autocmd BufRead,BufNewFile *.cpp set filetype=ccpp
"autocmd FileType ccpp colorscheme cpp

"-------------------------------------------------------------------------------
" [Python]
"一键执行python代码
"map <F5> :Autopep8<CR> :w<CR> :call RunPython()<CR>
"function RunPython()
"    let mp = &makeprg
"    let ef = &errorformat
"    let exeFile = expand("%:t")
"    setlocal makeprg=python\ -u
"    set efm=%C\ %.%#,%A\ \ File\ \"%f\"\\,\ line\ %l%.%#,%Z%[%^\ ]%\\@=%m
"    silent make %
"    copen
"    let &makeprg = mp
"    let &errorformat = ef
"endfunction

"-------------------------------------------------------------------------------
" [Quickly Run]
"nmap <F5> :call CompileRun()<CR>
function! CompileRun()
    exec "w"
    if &filetype == 'c'
        exec "!g++ % -o %<"
        exec "!time ./%<"
    elseif &filetype == 'cpp'
        exec "!g++ $ -o $<"
        exec "!time ./%<"
    elseif &filetype == 'java'
        exec "!javac %"
        exec "!time java %<"
    elseif &filetype == 'sh'
        :!time bash %
    elseif &filetype == 'python'
        exec "!time python %"
    elseif &filetype == 'html'
        exec "!firefox % &"
    elseif &filetype == 'go'
        exec "!go build %<"
        exec "!time go run %"
    elseif &filetype == 'mkd'
        exec "!~/.vim/markdown.pl % > %.html"
        exec "!firefox %.html $"
    endif
endfunc
">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>



"<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
" NOTE: 以下为Vim扩展插件设置，需按要求安装好对应插件
"*******************************************************************************
" NOTE: 非Vundle插件
"-------------------------------------------------------------------------------
" [ctags]
"------------------------------>>> ctags基础设置
"设置快捷键，按下Ctrl+n重新生成tag文件，并更新taglist
"map <silent> <C-N> :!ctags -R -f .tags --c-kinds=+cdfmsqtuv --c++-kinds=+cdfmnstuv --java-kinds=+cfimp --php-kinds=+cidfvj --python-kinds=+cfmvi --vim-kinds=+acfmv --fields=+ialS --extra=+q .<CR><CR> :TlistUpdate<CR>       "生成相对路径的tags
nmap <silent> <C-N> :!ctags -R -f .tags --c-kinds=+cdfmsqtuv --c++-kinds=+cdfmnstuv --java-kinds=+cfimp --php-kinds=+cidfvj --python-kinds=+cfmvi --vim-kinds=+acfmv --fields=+ialS --extra=+q `pwd`<CR><CR> :TlistUpdate<CR>       "生成绝对路径的tags
"map <C-F12> :!ctags -R --c++-kinds=+p --fields=+iaS --extra=+q .<CR>
"imap <F5> <ESC>:!ctags -R --c++-kinds=+p --fields=+iaS --extra=+q .<CR><CR> :TlistUpdate<CR>
set tags=./.tags;,.tags       "不可省略，表示若当前目录中不存在tags，则在父目录中寻找。分号，代表 “向上搜索”，会首先在你当前文件所在的文件夹（不是当前文件夹）里面搜索名为 tags的文件，没有的话，往上一级目录，再没有的话，再往上一级目录，直到搜索到根目录为止

"------------------------------>>> ctags python设置
"if &filetype == 'python'
"    set tags+=~/.vim/GlobalTags/python3_4_5.tags
"endif

"------------------------------>>> ctags PHP设置
"环境变量中设置: alias phptags='ctags -R -f .tags --langmap=php:.engine.inc.module.theme.php --php-kinds=cdf --languages=php --fields=+ialS --extra=+q `pwd`'
"~/.ctags文件中:
"--regex-php=/^[ \t]*[(private|public|static)( \t)]*function[ \t]+([A-Za-z0-9_]+)[ \t]*\(/\1/f, function, functions/
"--regex-php=/^[ \t]*[(private|public|static)]+[ \t]+\$([A-Za-z0-9_]+)[ \t]*/\1/p, property, properties/
"--regex-php=/^[ \t]*(const)[ \t]+([A-Za-z0-9_]+)[ \t]*/\2/d, const, constants/
"使用时:
"phptags


"-------------------------------------------------------------------------------
" [echofunc]
"echofunc可以在命令行中提示当前输入函数的原型
"此插件需要tags文件的支持,并且在创建tags文件的时候要加选项"--fields=+lS"
"echofunc插件对库函数不起作用，如果想在输入库函数时也能显示函数原型，可以在库函数所在文件夹生成tag文件


"-------------------------------------------------------------------------------
" [taglist]
"<CR>           跳到光标下tag所定义的位置，用鼠标双击此tag功能也一样
"o              在一个新打开的窗口中显示光标下tag
"<Space>        显示光标下tag的原型定义
"u              更新taglist窗口中的tag
"s              更改排序方式，在按名字排序和按出现顺序排序间切换
"x              taglist窗口放大和缩小，方便查看较长的tag
"+              打开一个折叠，同zo
"-              将tag折叠起来，同zc
"*              打开所有的折叠，同zR
"=              将所有tag折叠起来，同zM
"[[             跳到前一个文件
"]]             跳到后一个文件
"q              关闭taglist窗口
"<F1>           显示帮助 
"可以用“:TlistOpen”打开taglist窗口，用“:TlistClose”关闭taglist窗口。或者使用“:TlistToggle”在打开和关闭间切换
""if MySys() == "windows"                "设定windows系统中ctags程序的位置
""    let Tlist_Ctags_Cmd = 'ctags'
""elseif MySys() == "linux"              "设定linux系统中ctags程序的位置
""    let Tlist_Ctags_Cmd = '/usr/bin/ctags'
""endif
"let Tlist_Ctags_Cmd='ctags'             "指定Exuberant ctags程序的位置，如果它没在你PATH变量所定义的路径中，需要使用此选项设置一下。因为我们放在环境变量里，所以可以直接执行
"let Tlist_Process_File_Always=1         "实时更新tags!是否一直处理tags.1:处理;0:不处理
"let Tlist_Use_Right_Window=1            "让窗口显示在右边,0的话就是显示在左边,默认为左侧
"let Tlist_GainFocus_On_ToggleOpen=1     "在使用:TlistToggle打开taglist窗口时，如果希望输入焦点在taglist窗口中，设置Tlist_GainFocus_On_ToggleOpen为1
""let Tlist_Sort_Type='name'             "设置Tlist_Sort_Type为”name”可以使taglist以tag名字进行排序，缺省是按tag在文件中出现的顺序进行排序。按tag出现的范围（即所属的namespace或class）排序，已经加入taglist的TODO List，但尚未支持
"let Tlist_Show_One_File=1               "让taglist可以同时显示多个文件的函数列表,设置0则为显示多个,1为显示单个
"let Tlist_File_Fold_Auto_Close=1        "当同时显示多个文件中的tag时，设置Tlist_File_Fold_Auto_Close为１，可使taglist只显示当前文件tag，其它文件的tag都被折叠起来
"let Tlist_Close_On_Select=1             "在选择了tag后自动关闭taglist窗口,1为关闭
"let Tlist_Exit_OnlyWindow=1             "当taglist是最后一个分割窗口时，自动推出vim
"let Tlist_Inc_Winwidth=0
"let Tlist_Auto_Open=0                   "启动VIM后,自动打开taglist窗口，1为打开,0为不打开
""let Tlist_WinHeight=100
""let Tlist_WinWidth=40
""let Tlist_Use_Horiz_Window=1           "为１则设置taglist窗口横向显示
"nmap <silent> <C-M> :TlistToggle<CR>



"*******************************************************************************
" NOTE: 下皆为Vundle安装插件设置，其余部分皆放在上面设置
"-------------------------------------------------------------------------------
" [Vundle]

"-------------------------------------------------------------------------------
" [Code Completions]
"------------------------------>>> neocomplcache.vim
"------------------------------>>> neocomplete.vim
"------------------------------>>> ListToggle
"------------------------------>>> YouCompleteMe
"需要先安装ListToggle、syntastic
"let g:ycm_global_ycm_extra_conf = '~/.vim/bundle/YouCompleteMe/third_party/ycmd/cpp/ycm/.ycm_extra_conf.py '
"下面这句话是决定补全时用什么按键
"let g:ycm_key_list_select_completion = ['<Down>'] 
"nnoremap <leader>jd :YcmCompleter GoToDefinitionElseDeclaration<CR>
"nnoremap <F9> :YcmCompleter GoToDefinitionElseDeclaration<CR>
"nnoremap <F5> :YcmForceCompileAndDiagnostics<CR>
"let g:ycm_confirm_extra_conf=0    "打开vim时不再询问是否加载ycm_extra_conf.py配置
"let g:ycm_collect_identifiers_from_tag_files = 1 "使用ctags生成的tags文件
"let g:ycm_filetype_whitelist = {'cpp':1 , 'c': 1, 'python':1}

"------------------------------>>> supertab
"------------------------------>>> delimitMate
"------------------------------>>> snipmate.vim
"------------------------------>>> vim-snippets
"------------------------------>>> vim-addon-mw-utils
"------------------------------>>> tlib_vim

"-------------------------------------------------------------------------------
" [Fast Navigation]
"------------------------------>>> vim-matchit
"------------------------------>>> vim-easymotion

"-------------------------------------------------------------------------------
" [Fast Editing]
"------------------------------>>> indentLine
"插件安装成功后就会显示缩进对齐线, 我们仅仅在 .vimrc 里加一行来切换是否显示
nmap <C-L> :IndentLinesToggle<CR>
let g:indentLine_char='|'
let g:indentLine_enabled=0
"let g:indentLine_setColors=0
"let g:indentLine_color_term=239

"------------------------------>>> vim-surround
"------------------------------>>> nerdcommenter
"------------------------------>>> gundo.vim
"------------------------------>>> tabular
"------------------------------>>> vim-indent-guides

"-------------------------------------------------------------------------------
" [IDE Features]
"------------------------------>>> quickfix
"QuickFIX C++ Fix Engine Library
"将编译过程中产生的错误信息保存到文件中，然后vim利用这些信息跳转到源文件的对应位置
"set makeprg=gcc\ hello.c\ -o\ hello   "make命令执行的程序为vim变量makeprg的值，默认makeprg=make，使用Makefile机制进行项目的编译、管理。可以通过set makeprg=xxx的命令修改makeprg的值，从而使make命令执行不同的编译。
"常用quickfix命令
":cc            显示详细错误信息
":cp            跳到上一个错误
":cn            跳到下一个错误
":cl            列出所有错误
":cw            如果有错误列表，则打开quickfix窗口，没有则什么也不错
":copen         打开quickfix窗口，可以在后面添加窗口高度参数，如10行： :copen 10
":cclose        关闭quickfix窗口
":col           到前一个旧的错误列表
":cnew          到后一个较新的错误列表

"------------------------------>>> nerdtree
"设置NerdTree
map <F3> :NERDTreeMirror<CR>
map <F3> :NERDTreeToggle<CR>
let g:NERDTree_title="[NERDTree]"
let g:nerdtree_tabs_open_on_console_startup=1   "在终端启动vim时，共享NERDTree
let NERDTreeShowHidden=1                        "显示隐藏文件
let NERDTreeIgnore=['\.pyc','\~$','\.swp']      "忽略以下文件的显示
let NERDTreeShowBookmarks=1                     "显示书签列表
let NERDTreeQuitOnOpen=1                        "打开文件时关闭树
let NERDTreeDirArrows=0                         "目录箭头 1 显示箭头  0传统+-|号
let NERDTreeCaseSensitiveSort=1                 "排序时是否大小写敏感
let NERDTreeQuitOnOpen=1                        "打开文件后是否关闭NerdTree窗口
let NERDTreeWinPos="left"                       "窗口位置（'left' or 'right'）
let NERDTreeStatusline=1                        "窗口状态栏
let NERDTreeWinSize=31                          "设置宽度
function! NERDTree_Start() 
	exe 'NERDTree'
endfunction
function! NERDTree_IsValid() 
	return 1
endfunction
"autocmd VimEnter * NERDTree
wincmd w
autocmd VimEnter * wincmd w

"------------------------------>>> TabBar
"------------------------------>>> tagbar
"ctags标签提取显示
"tagbar比taglist优化之处:
"1. 支持头文件的函数列表显示
"2. 对面向对象的支持更好
"3. 自动根据文件修改时间来重建
"NOTE:文件不支持中文路径
nmap <C-B> :TagbarToggle<CR>
let g:tagbar_ctags_bin='ctags'
let g:tagbar_autofocus=1        "设置为打开tagbar自动切换
"let g:tagbar_width=30

"------------------------------>>> ack.vim
"------------------------------>>> ctrlp.vim
"文件跳转
"let g:ctrlp_map='<c-p>'
"let g:ctrlp_cmd='CtrlP'
"设置过滤不进行查找的后缀名 
"let g:ctrlp_custom_ignore='\v[\/]\.(git|hg|svn|pyc)$' 

"------------------------------>>> vim-fugitive
"------------------------------>>> vim-powerline
"PowerLine是一个增强的Vim状态栏插件。当Vim处于NORMAL、INSERT、BLOCK等状态时，状态栏会呈现不同的颜色，同时状态栏还会显示当前编辑文件的格式（uft-8等）、文件类型（java、xml等）和光标位置等

"------------------------------>>> vim-airline
"------------------------------>>> syntastic
"syantastic是一款强大的语法检查插件，支持很多语言的语法与编码风格检查。实际上这个插件只是个接口，背后的语法检查是交给各个语言自己的检查器
"nmap <C-E> :call ToggleErrors()<CR>
"map <C-0> :SyntasticToggleMode<CR>         "在激活/禁用间切换
"map <C-9> :lclose<CR>                      "关闭提示窗口
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*
let g:syntastic_always_populate_loc_list=1  "每次自动调用 :SyntasticSetLocList, 将错误覆盖 **quickfix**
let g:syntastic_auto_loc_list=1             "自动拉起/关闭错误窗口, 不需要手动调用 :Errors。0不自动. 1自动拉起关闭. 2 自动关闭，但不自动拉起. 3 自动拉起，但不自动关闭 默认2, 改为1
let g:syntastic_loc_list_height=5           "错误提示窗口高度
let g:syntastic_check_on_open=0             "设置为每次打开buffer就执行语法检查，而不只是在保存时
let g:syntastic_check_on_wq=0               "设置保存关闭文件时不执行语法检查
let g:syntastic_echo_current_error=1        "在命令行显示当前行的错误信息. 默认1
let g:syntastic_enable_sign=1               "做行号左边显示错误标记. 默认1
"配置error-sign
let g:syntastic_error_symbol='=>'
let g:syntastic_style_error_symbol='??'
let g:syntastic_warning_symbol='->'
let g:syntastic_style_warning_symbol='?'
"配置各语言的checker
let g:syntastic_python_checkers=['pylint']  "python语法检查器
let g:syntastic_python_pylint_args='--disable=C,R,W,E'    "忽略convention(C),refactor()R,warning(W),只报error(E)与致命错误(F)
let g:syntastic_php_checkers=['php']
let g:syntastic_php_phpcs_args='--standard=zend -n --report=csv'
func! ToggleErrors()
    if empty(filter(tabpagebuflist(), 'getbufvar(v:val, "&buftype") is# "quickfix"'))
        "No location/quickfix list shown, open syntastic error location panel
        Errors
    else 
        lclose
    endif
endfunc
func! ToggleErrors1()
    let old_last_winnr=winnr('$')
    lclose
    if old_last_winnr == winnr('$')
        "Nothing was closed, open syntastic error location panel
        Errors
    endif
endfunc

"------------------------------>>> vim-trailing-whitespace
"------------------------------>>> ShowTrailingWhitespace
"显示行尾空格
nmap <silent> <C-Z> :call ShowTrailingWhitespace#Toggle(0)<CR>
let g:ShowTrailingWhitespace=0

"-------------------------------------------------------------------------------
" [Syntax/Indent for language enhancement]
"------------------------------>>> a.vim
"头文件和实现文件的快速切换

"------------------------------>>> c.vim
"1. 自动为*.c文件添加文件头说明; 2. 插入一个函数 \if; 3. 插入main函数 \im; 4. 插入函数头 \cfu; 5. 添加一个注释块 \cfr; 6. 包含(include)一个头文件 \p<; 7. 保存文件，编译后立即执行; 8. 插入预先编辑好的程序块 \nr

"------------------------------>>> vim-jinja
"------------------------------>>> python-mode
"------------------------------>>> python.vim
"------------------------------>>> python_match.vim
"------------------------------>>> pythoncomplete
"------------------------------>>> PHP-Indenting-for-VIm
"------------------------------>>> xdebug
"let g:debuggerMaxDepth = 5
"let g:debuggerPort=9090     "注意：要与/etc/php.d/xdebug.ini中xdebug.remote_port端口配置一致

"------------------------------>>> vdebug
":Bp            toggle breakpoint,断点标记
":Up            stack up
":DN            stack down
"e              eval
"F1             调整窗口大小
"F2             调试步到下一标记,step over 
"F3             调试步进入下一标记,step into
"F4             调试步出当前标记,step out
"F5             调试运行
"F6             退出调试模式
"F11            获得所有变量内容
"F12            获得当前光标变量
let g:vdebug_options = {'server': '127.0.0.1'}
let g:vdebug_options = {'port': '9090'}

"------------------------------>>> vim-php-namespace
"------------------------------>>> vim-rails
"------------------------------>>> vim-endwise
"------------------------------>>> vim-jade
"------------------------------>>> html5.vim
"------------------------------>>> HTML-AutoCloseTag
"------------------------------>>> vim-css3-syntax
"------------------------------>>> vim-coloresque
"------------------------------>>> vim-haml
"------------------------------>>> emmet-vim
"------------------------------>>> vim-javascript
"------------------------------>>> vim-coffee-script
"------------------------------>>> jquery.vim
"------------------------------>>> vim-less
"------------------------------>>> vim-stylus
"------------------------------>>> vim-handlebars
"------------------------------>>> markdown-preview.vim
"------------------------------>>> tpope/vim-markdown
"------------------------------>>> plasticboy/vim-markdown
let g:vim_markdown_folding_disabled = 1		"禁用了vim-markdown的自动折叠

"------------------------------>>> textile.vim
"------------------------------>>> vim-go
"------------------------------>>> bash-support.vim
"使用菜单和热键来编写和执行BASH脚本
"Cite: http://www.360doc.com/content/12/0113/22/834950_179262769.shtml

"------------------------------>>> vimshell.vim
"------------------------------>>> rainbow_parentheses.vim
"------------------------------>>> vim-racket
"------------------------------>>> VimClojure
"------------------------------>>> scala-vim-support

"-------------------------------------------------------------------------------
" [Color Schemes]
"------------------------------>>> vim-blackboard
"------------------------------>>> vim-colors-solarized
"------------------------------>>> vim-monokai
"------------------------------>>> vim-vividchalk
"------------------------------>>> vim-distinguished
"------------------------------>>> vim-tomorrow-theme
"------------------------------>>> fisa-vim-colorscheme

"-------------------------------------------------------------------------------
" [Other Plugins]
"------------------------------>>> fcitx-status
"------------------------------>>> vim-togglemouse
"------------------------------>>> vim-plugin-viewdoc

">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
